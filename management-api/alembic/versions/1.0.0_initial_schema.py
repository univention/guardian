# Copyright (C) 2023 Univention GmbH
#
# SPDX-License-Identifier: AGPL-3.0-only

"""Initial Schema

Revision ID: 1.0.0
Revises:
Create Date: 2023-08-31 09:52:52.680566

"""
import base64
import json
import os.path
from pathlib import Path
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy import insert, orm

# revision identifiers, used by Alembic.
revision: str = "1.0.0"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def create_guardian_app(session, app_table, ns_table, role_table) -> int:
    app_data = {"name": "guardian", "display_name": "The Guardian Application"}
    app_id = session.execute(insert(app_table).values(app_data)).lastrowid
    ns_default = {
        "app_id": app_id,
        "name": "default",
        "display_name": "Default Namespace of the Guardian Application",
    }
    ns_protected = {
        "app_id": app_id,
        "name": "builtin",
        "display_name": "Builtin Namespace of the Guardian Application",
    }
    session.execute(insert(ns_table).values(ns_default))
    ns_id = session.execute(insert(ns_table).values(ns_protected)).lastrowid
    role_data = {
        "namespace_id": ns_id,
        "name": "app-admin",
        "display_name": "The app admin for the Guardian Application",
    }
    session.execute(insert(role_table).values(role_data))
    return ns_id


def create_builtin_conditions(session, cond_table, ns_id):
    condition_path = (
        Path(os.path.dirname(os.path.realpath(__file__)))
        / "../1.0.0_builtin_conditions"
    )
    for data_file in condition_path.glob("*.json"):
        cond_name = data_file.stem
        with open(data_file, "r") as f:
            data = json.load(f)
        with open(condition_path / f"{cond_name}.rego", "rb") as f:
            code = f.read()
        data["code"] = base64.b64encode(code)
        data["name"] = cond_name
        data["namespace_id"] = ns_id
        session.execute(insert(cond_table).values(data))


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    app_table = op.create_table(
        "app",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("display_name", sa.String(length=256), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    ns_table = op.create_table(
        "namespace",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("app_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("display_name", sa.String(length=256), nullable=True),
        sa.ForeignKeyConstraint(
            ["app_id"],
            ["app.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("app_id", "name"),
    )
    cond_table = op.create_table(
        "condition",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("namespace_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("display_name", sa.String(length=256), nullable=True),
        sa.Column("documentation", sa.Text(), nullable=True),
        sa.Column("parameters", sa.Text(), nullable=False),
        sa.Column("code", sa.LargeBinary(), nullable=False),
        sa.ForeignKeyConstraint(
            ["namespace_id"],
            ["namespace.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("namespace_id", "name"),
    )
    op.create_table(
        "context",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("namespace_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("display_name", sa.String(length=256), nullable=True),
        sa.ForeignKeyConstraint(
            ["namespace_id"],
            ["namespace.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("namespace_id", "name"),
    )
    op.create_table(
        "permission",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("namespace_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("display_name", sa.String(length=256), nullable=True),
        sa.ForeignKeyConstraint(
            ["namespace_id"],
            ["namespace.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("namespace_id", "name"),
    )
    role_table = op.create_table(
        "role",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("namespace_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("display_name", sa.String(length=256), nullable=True),
        sa.ForeignKeyConstraint(
            ["namespace_id"],
            ["namespace.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("namespace_id", "name"),
    )
    # ### end Alembic commands ###

    # Setup Guardian default objects
    bind = op.get_bind()
    session = orm.Session(bind=bind)
    ns_id = create_guardian_app(session, app_table, ns_table, role_table)
    create_builtin_conditions(session, cond_table, ns_id)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("role")
    op.drop_table("permission")
    op.drop_table("context")
    op.drop_table("condition")
    op.drop_table("namespace")
    op.drop_table("app")
    # ### end Alembic commands ###
