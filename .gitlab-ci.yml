# Copyright (C) 2023 Univention GmbH
#
# SPDX-License-Identifier: AGPL-3.0-only

include:
  - project: univention/dist/docker-services
    file:
      - kaniko.yml
      - pre-commit.yml

variables:
  APPCENTER_CONTROL_IMAGE: "docker-registry.knut.univention.de/knut/univention-appcenter-control"

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_OPEN_MERGE_REQUESTS
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "webide"
stages:
  - test
  - build_python
  - build_docker
  - publish
  - lint

run_pre_commit:
  stage: lint
  needs: []
  extends: .pre-commit

# No jobs for OPA code were created, since the form and structure of the OPA code is not final yet. TODO

test_management:
  stage: test
  rules:
    - changes:
        - management-api/**/*
  image: docker-registry.knut.univention.de/python:3.11-slim
  script:
    - cd management-api
    - pip install poetry
    - poetry config --local virtualenvs.create false
    - poetry install
    - pytest -vv .

coverage_management:
  stage: test
  rules:
    - changes:
        - management-api/**/*
  image: docker-registry.knut.univention.de/python:3.11-slim
  script:
    - cd management-api
    - pip install poetry
    - poetry config --local virtualenvs.create false
    - poetry install
    - pytest -vv --cov=guardian_management_api .
    - coverage report --fail-under="$MANAGEMENT_COVERAGE_LIMIT"  # Variable set in Gitlab UI

test_authz:
  stage: test
  rules:
    - changes:
        - authorization-api/**/*
  image: docker-registry.knut.univention.de/python:3.11-slim
  script:
    - cd authorization-api
    - pip install poetry
    - poetry config --local virtualenvs.create false
    - poetry install
    - pytest -vv .

coverage_authz:
  stage: test
  rules:
    - changes:
        - authorization-api/**/*
  image: docker-registry.knut.univention.de/python:3.11-slim
  script:
    - cd authorization-api
    - pip install poetry
    - poetry config --local virtualenvs.create false
    - poetry install
    - pytest -vv --cov=guardian_authorization_api .
    - coverage report --fail-under="$AUTHZ_COVERAGE_LIMIT"  # Variable set in Gitlab UI

test_port_loader:
  stage: test
  rules:
    - changes:
        - port-loader/**/*
  image: docker-registry.knut.univention.de/python:3.11-slim
  script:
    - cd port-loader
    - pip install poetry
    - poetry config --local virtualenvs.create false
    - poetry install
    - pytest -vv .

coverage_port_loader:
  stage: test
  rules:
    - changes:
        - port-loader/**/*
  image: docker-registry.knut.univention.de/python:3.11-slim
  script:
    - cd port-loader
    - pip install poetry
    - poetry config --local virtualenvs.create false
    - poetry install
    - pytest -vv --cov=port_loader .
    - coverage report --fail-under="$PORT_LOADER_COVERAGE_LIMIT"  # Variable set in Gitlab UI

build_port_loader:
  stage: build_python
  needs:
    - test_port_loader
    - coverage_port_loader
  rules:
    - changes:
        - port-loader/**/*
  artifacts:
    paths:
      - port-loader/dist/
    expire_in: 1 week
  image: docker-registry.knut.univention.de/python:3.11-slim
  script:
    - cd port-loader
    - pip install poetry
    - |-
      if [ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]; then
        poetry version "0.0.0.dev0+${CI_COMMIT_REF_SLUG//-/.}.$CI_COMMIT_SHORT_SHA"
      else
        true
      fi
    - poetry config --local virtualenvs.create false
    - poetry build

build_docker_image_opa:
  stage: build_docker
  rules:
    - changes:
        - opa/**/*
  extends: .kaniko
  variables:
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR/opa"
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE/guardian-opa
    KANIKO_ARGS: --build-arg commit="$CI_COMMIT_SHA" --build-arg date="$CI_JOB_STARTED_AT" --cache=true --cache-repo=$CI_REGISTRY_IMAGE/cache

build_docker_image_authz:
  stage: build_docker
  needs:
    - test_authz
    - coverage_authz
  rules:
    - changes:
        - authorization-api/**/*
  extends: .kaniko
  variables:
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR/authorization-api"
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE/guardian-authorization-api
    KANIKO_ARGS: --build-arg commit="$CI_COMMIT_SHA" --build-arg date="$CI_JOB_STARTED_AT" --cache=true --cache-repo=$CI_REGISTRY_IMAGE/cache

build_docker_image_management:
  stage: build_docker
  needs:
    - test_management
    - coverage_management
  rules:
    - changes:
        - management-api/**/*
  extends: .kaniko
  variables:
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR/management-api"
    CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE/guardian-management-api
    KANIKO_ARGS: --build-arg commit="$CI_COMMIT_SHA" --build-arg date="$CI_JOB_STARTED_AT" --cache=true --cache-repo=$CI_REGISTRY_IMAGE/cache

publish_port_loader:
  stage: publish
  when: manual
  rules:
    - changes:
        - port-loader/**/*
  dependencies:
    - build_port_loader
  needs:
    - build_port_loader
  image: docker-registry.knut.univention.de/python:3.11-slim
  script:
    - cd port-loader
    - pip install poetry
    - |-
      if [ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]; then
        poetry version "0.0.0.dev0+${CI_COMMIT_REF_SLUG//-/.}.$CI_COMMIT_SHORT_SHA"
      else
        true
      fi
    - poetry config --local virtualenvs.create false
    - poetry config --local repositories.project_local ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry publish -r project_local --username gitlab-ci-token --password ${CI_JOB_TOKEN}

authz_app_to_test_appcenter:
  stage: publish
  image: $APPCENTER_CONTROL_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - appcenter-authz/**/*
  needs: []
  variables:
    APP_ID: "guardian-authorization-api"
    APP_DIR: "appcenter-authz"
    APP_NAME: "5.0/$APP_ID"
  script:
    - cd "$APP_DIR"
    - APP_VERSION="$(sed -n 's/^Version\s*=\s*//p' ini)"
    - echo "updating $APP_NAME=$APP_VERSION"
    - univention-appcenter-control upload "$APP_NAME=$APP_VERSION" compose configure_host ini ini README_UPDATE_DE README_UPDATE_EN settings uinst

management_app_to_test_appcenter:
  stage: publish
  image: $APPCENTER_CONTROL_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - appcenter-management/**/*
  needs: []
  variables:
    APP_ID: "guardian-management-api"
    APP_DIR: "appcenter-management"
    APP_NAME: "5.0/$APP_ID"
  script:
    - cd "$APP_DIR"
    - APP_VERSION="$(sed -n 's/^Version\s*=\s*//p' ini)"
    - echo "updating $APP_NAME=$APP_VERSION"
    - univention-appcenter-control upload "$APP_NAME=$APP_VERSION" compose configure_host ini ini README_UPDATE_DE README_UPDATE_EN settings uinst
