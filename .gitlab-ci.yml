# Copyright (C) 2023 Univention GmbH
#
# SPDX-License-Identifier: AGPL-3.0-only

---
include:
  - project: univention/dist/docker-services
    file:
      - pre-commit.yml
  - project: "univention/customers/dataport/upx/common-ci"
    ref: "v1.12.0"
    file:
      - "defaults/souvap-workflow.yaml"
      # - "jobs/lint-pre-commit.yaml"
      # - "jobs/lint-commit-messages.yaml"
      - "jobs/semantic-release-env.yaml"
      - "jobs/container-build-souvap.yaml"
      - "jobs/package-and-publish-helm-charts-souvap.yaml"
  - project: 'univention/documentation/sphinx-docker'
    file: 'pipeline/sphinx.yml'

variables:
  APPCENTER_CONTROL_IMAGE: "docker-registry.knut.univention.de/knut/univention-appcenter-control"
  POETRY_VERSION: "1.5.1"
  UCS_VERSION: "505"
  UCS_RELEASE: "5.0"
  DEB_IMAGE: docker-registry.knut.univention.de/phahn/ucs-debbase:$UCS_VERSION
  UCSLINT_IMAGE: gitregistry.knut.univention.de/univention/ucs
  UCS_TEST_PACKAGE: "ucs-test-guardian"
  SCOPE: "guardian"
  DOCS_DIR: "docs/guardian-manual"
  DOC_TARGET_VERSION: "1.2"
  DOC_TARGET_NAME: "guardian-manual"
  DOC_TARGET_PATH: "$DOC_TARGET_NAME/$DOC_TARGET_VERSION"

stages:
  - test_python
  - build
  - test
  - package
  - publish
  - build_debian
  - lint
  - build
  - merge
  - production

.build-matrix: &build-matrix
  - IMAGE_NAME: "guardian-authorization-api"
    # DOCKERFILE_PATH: "authorization-api/Dockerfile"
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR/authorization-api"
  - IMAGE_NAME: "guardian-management-api"
    # DOCKERFILE_PATH: "management-api/Dockerfile"
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR/management-api"
  - IMAGE_NAME: "guardian-management-ui"
    DOCKERFILE_PATH: "management-ui/docker/Dockerfile"
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR"
  - IMAGE_NAME: "guardian-opa"
    # DOCKERFILE_PATH: "opa/Dockerfile"
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR/opa"

container-build:
  needs:
    - pre-semantic-release
    - job: build_guardian_lib
      optional: true
  parallel:
    matrix: *build-matrix

container-generate-sbom:
  parallel:
    matrix: *build-matrix

container-sign:
  parallel:
    matrix: *build-matrix

container-security-scan:
  parallel:
    matrix: *build-matrix

push-image-souvap:
  parallel:
    matrix: *build-matrix

container-sign-souvap:
  parallel:
    matrix: *build-matrix

.pre_commit:
  stage: lint
  needs: []
  extends: .pre-commit
  variables:
    PRE_COMMIT_IMAGE: "docker-registry.knut.univention.de/knut/pre-commit-opa"

run_precommit_general:
  extends: .pre_commit
  script:
    - export SKIP=$(python3 .gitlab-ci/pre_commit_hook_parser.py .pre-commit-config.yaml general)
    - pre-commit run -a

run_precommit_backend:
  extends: .pre_commit
  script:
    - export SKIP=$(python3 .gitlab-ci/pre_commit_hook_parser.py .pre-commit-config.yaml backend)
    - pre-commit run -a

run_precommit_frontend:
  extends: .pre_commit
  script:
    - export SKIP=$(python3 .gitlab-ci/pre_commit_hook_parser.py .pre-commit-config.yaml frontend)
    - cd /tmp  &&curl https://nodejs.org/download/release/v18.19.0/node-v18.19.0-linux-x64.tar.gz --output node.tar.gz
    - cd /usr/local && tar -xzf /tmp/node.tar.gz --strip-components 1
    - npm install -g yarn
    - cd $CI_PROJECT_DIR
    - yarn --cwd management-ui install
    - pre-commit run -a

# No jobs for OPA code were created, since the form and structure of the OPA code is not final yet. TODO
.rules_overrides: &rules_overrides
  - if: "$CI_COMMIT_MESSAGE =~ /skip-build/ || $pipeline =~ /skip-build/"
    when: never
  - if: "$CI_COMMIT_MESSAGE =~ /force-build/ || $pipeline =~ /force-build/"

.test:
  stage: test_python
  image: docker-registry.knut.univention.de/python:3.11-slim
  variables:
    GUARDIAN__MANAGEMENT__BASE_URL: "http://localhost:8001"
    GUARDIAN_COMPONENT: ""
    GUARDIAN_TEST_ARGS: ""
  script:
    - cd "$GUARDIAN_COMPONENT"
    - pip install poetry=="$POETRY_VERSION"
    - poetry config --local virtualenvs.create false
    - poetry install
    - pytest -vv "$GUARDIAN_TEST_ARGS" .
  rules:
    - *rules_overrides
    - changes:
        - $GUARDIAN_COMPONENT/**/*

.coverage:
  extends: .test
  variables:
    GUARDIAN__MANAGEMENT__BASE_URL: "http://localhost:8001"
    GUARDIAN_COMPONENT: ""
    GUARDIAN_TEST_ARGS: ""
    GUARDIAN_COVERAGE_COMPONENT: ""
    GUARDIAN_COVERAGE_LIMIT: ""
  script:
    - cd "$GUARDIAN_COMPONENT"
    - pip install poetry=="$POETRY_VERSION"
    - poetry config --local virtualenvs.create false
    - poetry install
    - pytest -vv "$GUARDIAN_TEST_ARGS" --cov="$GUARDIAN_COVERAGE_COMPONENT" --cov-report=term --cov-report=xml:coverage.xml .
    - coverage report --fail-under="$GUARDIAN_COVERAGE_LIMIT"  # Variable set in Gitlab UI
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $GUARDIAN_COMPONENT/coverage.xml

test_management:
  extends: .test
  variables:
    GUARDIAN_COMPONENT: "docker/guardian-management-api"
    GUARDIAN_TEST_ARGS: "-k not e2e_udm"

coverage_management:
  extends: .coverage
  variables:
    GUARDIAN_COMPONENT: "docker/guardian-management-api"
    GUARDIAN_TEST_ARGS: "-k not e2e_udm"
    GUARDIAN_COVERAGE_COMPONENT: "guardian_management_api"
    GUARDIAN_COVERAGE_LIMIT: $MANAGEMENT_COVERAGE_LIMIT

test_authz:
  extends: .test
  variables:
    GUARDIAN_COMPONENT: "docker/guardian-authorization-api"

coverage_authz:
  extends: .coverage
  variables:
    GUARDIAN_COMPONENT: "docker/guardian-authorization-api"
    GUARDIAN_COVERAGE_COMPONENT: "guardian_authorization_api"
    GUARDIAN_COVERAGE_LIMIT: $AUTHZ_COVERAGE_LIMIT

test_guardian_lib:
  extends: .test
  variables:
    GUARDIAN_COMPONENT: "guardian-lib"

coverage_guardian_lib:
  extends: .coverage
  variables:
    GUARDIAN_COMPONENT: "guardian-lib"
    GUARDIAN_COVERAGE_COMPONENT: "guardian_lib"
    GUARDIAN_COVERAGE_LIMIT: $GUARDIAN_LIB_COVERAGE_LIMIT

build_guardian_lib:
  stage: build
  needs:
    - test_guardian_lib
    - coverage_guardian_lib
  rules:
    - *rules_overrides
    - changes:
        - guardian-lib/**/*
  artifacts:
    paths:
      - guardian-lib/dist/
    expire_in: 1 week
  image: docker-registry.knut.univention.de/python:3.11-slim
  script:
    - cd guardian-lib
    - pip install poetry=="$POETRY_VERSION"
    - |-
      if [ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]; then
        poetry version "0.0.0.dev0+${CI_COMMIT_REF_SLUG//-/.}.$CI_COMMIT_SHORT_SHA"
      else
        true
      fi
    - poetry config --local virtualenvs.create false
    - poetry build

publish_guardian-lib:
  stage: publish
  when: manual
  rules:
    - *rules_overrides
    - changes:
        - guardian-lib/**/*
  dependencies:
    - build_guardian_lib
  needs:
    - build_guardian_lib
  image: docker-registry.knut.univention.de/python:3.11-slim
  script:
    - cd guardian-lib
    - pip install poetry=="$POETRY_VERSION"
    - |-
      if [ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]; then
        poetry version "0.0.0.dev0+${CI_COMMIT_REF_SLUG//-/.}.$CI_COMMIT_SHORT_SHA"
      else
        true
      fi
    - poetry config --local virtualenvs.create false
    - poetry config --local repositories.project_local ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry publish -r project_local --username gitlab-ci-token --password ${CI_JOB_TOKEN}

.app_to_test_appcenter:
  stage: publish
  image: $APPCENTER_CONTROL_IMAGE
  needs: []
  variables:
    APP_ID: "guardian-authorization-api"
    APP_DIR: "appcenter-authz"
    APP_NAME: "5.0/$APP_ID"
  script:
    - cd "$APP_DIR"
    - APP_VERSION="$(sed -n 's/^Version\s*=\s*//p' ini)"
    - echo "updating $APP_NAME=$APP_VERSION"
    - ./scripts/generate-preinst
    - univention-appcenter-control upload "$APP_NAME=$APP_VERSION" compose configure_host inst ini preinst README_UPDATE_DE README_UPDATE_EN settings uinst
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - $APP_DIR/**/*

authz_app_to_test_appcenter:
  extends: .app_to_test_appcenter
  variables:
    APP_ID: "guardian-authorization-api"
    APP_DIR: "appcenter-authz"
    APP_NAME: "5.0/$APP_ID"

management_app_to_test_appcenter:
  extends: .app_to_test_appcenter
  variables:
    APP_ID: "guardian-management-api"
    APP_DIR: "appcenter-management"
    APP_NAME: "5.0/$APP_ID"

management_ui_app_to_test_appcenter:
  extends: .app_to_test_appcenter
  variables:
    APP_ID: "guardian-management-ui"
    APP_DIR: "appcenter-management-ui"
    APP_NAME: "5.0/$APP_ID"

ucs_test_deb_lint:
  stage: lint
  rules:
    - *rules_overrides
    - changes:
      - $UCS_TEST_PACKAGE/**/*
  image:
    name: $UCSLINT_IMAGE
    entrypoint: [""]
  script:
    - cd $UCS_TEST_PACKAGE && ucslint -j ucslint.xml
  artifacts:
    reports:
      junit: $UCS_TEST_PACKAGE/ucslint.xml

ucs_test_deb_build_git:
  stage: build_debian
  image: $DEB_IMAGE
  rules:
    - *rules_overrides
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      changes:
        - $UCS_TEST_PACKAGE/**/*
  script:
    - apt-get update
    - cd $UCS_TEST_PACKAGE
    - apt-get -q --assume-yes build-dep .
    - dpkg-buildpackage -us -uc
    - install -d -m 755 build
    - mv ../*.tar.*z ../*.dsc ../*.deb ../*.buildinfo ../*.changes build/
  artifacts:
    paths:
      - $UCS_TEST_PACKAGE/build/


ucs_test_deb_repo_import:
  stage: build_debian
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - $UCS_TEST_PACKAGE/debian/changelog
  tags:
    - omar
  script:
    - >
      repo_admin.py
      -G $CI_REPOSITORY_URL
      -b $CI_COMMIT_BRANCH
      -P $UCS_TEST_PACKAGE
      -r ${UCS_RELEASE}-0-0
      -s $SCOPE
      -p $UCS_TEST_PACKAGE

ucs_test_deb_repo_build:
  stage: build_debian
  needs:
    - job: ucs_test_deb_repo_import
      artifacts: false
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - $UCS_TEST_PACKAGE/debian/changelog
  tags:
    - ladda
  script:
    - >
      build-package-ng
      --no-pbuilder-update
      -r ${UCS_RELEASE}-0-0
      -s $SCOPE
      -p $UCS_TEST_PACKAGE

post-semantic-release:
  stage: ".post"
  script:
    - echo "Not needed until semantic-release is needed"

docs-linkcheck:
  extends: .sphinx-linkcheck-template
  rules:
    - changes:
      - $DOCS_DIR/**/*

docs-spelling:
  extends: .sphinx-spelling-template
  rules:
    - changes:
      - $DOCS_DIR/**/*

docs-html:
  extends: .sphinx-html-template
  rules:
    - changes:
      - $DOCS_DIR/**/*

docs-pdf:
  extends: .sphinx-pdf-template
  rules:
    - changes:
      - $DOCS_DIR/**/*

docs-warnings:
  extends: .sphinx-warnings-template
  rules:
    - changes:
      - $DOCS_DIR/**/*

docs-merge-to-one-artifact:
  extends: .sphinx-merge-template
  needs:
    - job: docs-html
    - job: docs-pdf
    - job: docs-spelling
      artifacts: false
    - job: docs-linkcheck
      artifacts: false
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      changes:
      - $DOCS_DIR/**/*
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
      - $DOCS_DIR/**/*
      when: manual

# The template has inherit:variables:false to prevent the passing of pipeline
# variables to downstream, and therefore $DOCS_DIR is not available here.
docs-create-production-merge-request:
  extends: .sphinx-docs-merge-request-template
  needs:
    - job: docs-merge-to-one-artifact
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
      - docs/**/*
